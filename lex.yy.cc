#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 18
#define YY_END_OF_BUFFER 19
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[373] =
    {   0,
        0,    0,   19,   17,    2,    1,    2,   17,   17,   17,
        6,   17,   17,    5,    4,   16,   17,    3,   14,   17,
        0,   17,   17,    0,   17,   16,   16,   17,    0,   15,
       17,    0,   17,   17,   17,   16,   17,   17,    0,   10,
        7,    8,   16,    0,   16,   16,   16,   16,   16,   16,
       17,   14,   14,   14,   14,   14,   14,   16,   16,   16,
       16,   15,   15,   17,   15,    0,   17,    0,    0,   17,
       13,   16,   16,   16,   17,   17,    0,   16,   17,    0,
        9,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,

       16,   16,   16,   17,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   16,   16,   16,
       16,   16,   17,   15,    0,    0,   13,   16,   13,   13,
       16,    0,   16,   16,   13,   16,   16,   16,   16,   17,
       17,    0,   16,   12,   12,   12,   16,   16,   16,   16,
       16,   12,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   11,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   17,   15,    0,   12,   15,   12,

       15,   16,   13,   16,   16,   16,   16,   13,   16,   13,
       16,   16,   13,   16,   16,   16,   16,   13,   16,   16,
       12,   12,   12,   12,   12,   12,   12,   16,   16,   16,
       16,   12,   16,   16,   12,   16,   16,   16,   16,   16,
       12,   12,   12,   12,   12,   12,   16,   16,   12,   12,
       16,   16,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   12,   12,   12,   14,   14,   14,   14,   14,   12,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   12,   12,   12,   12,   12,   12,   16,   13,   16,
       13,   13,   12,   12,   12,   12,   12,   12,   16,   16,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   14,   12,   12,   12,   12,   12,   12,   12,
       14,   14,   14,   14,   12,   14,   14,   12,   14,   14,
       14,   14,   14,   12,   12,   12,   12,   12,   12,   14,
       14,   12,   12,   14,   14,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   14,   14,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    7,    8,    1,    9,
       10,    1,    1,    1,    1,    1,    1,    1,    1,   11,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   12,
        1,   13,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   14,    1,    1,    1,    1,    1,    1,    1,    1,

       15,    1,    1,    1,   16,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   17,    1,    1,    1,   18,
        1,    1,   19,   20,   21,   22,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[23] =
    {   0,
        1,    2,    3,    4,    5,    1,    5,    6,    7,    7,
        1,    8,    8,    1,    1,    1,    1,    1,    7,    8,
        1,    1
    } ;

static const flex_int16_t yy_base[450] =
    {   0,
        0,    0,  229,   22,  212, 3480, 3480,   44,   65,   84,
      219,  105,  211,  216,   63,  119,  203,  210,  141,    0,
      201,    0,  195,  207,    0,    0,  162,    0,  207,    0,
      180,  198,  215,    0,  235,  256,  275,  192,  191,  203,
      200,   67,  295,  191,    0,  316,  335,  356,    0,  370,
      182,    0,  392,  414,  431,  178,  450,  471,  484,    0,
      497,  191,    0,  515,  533,   63,    0,  552,  185,  573,
        0,  593,    0,  614,  634,  649,  173,  670,  685,    0,
      185,    0,  705,  171,  722,    0,    0,  741,  181,    0,
      760,  779,    0,  168,    0,  799,    0,    0,  167,    0,

        0,    0,    0,  164,  814,  827,    0,  846,  865,  161,
      885,    0,  907,  929,  159,    0,  951,    0,    0,    0,
        0,    0,  971,  990, 1009,   83,    0, 1030,  167, 1051,
     1071, 1093,    0, 1115,    0,    0, 1137,    0,    0,    0,
     1152,  147,    0, 1173, 1188,  124, 1209,    0, 1231,    0,
     1253, 1275,  103,  125,    0, 1290, 1300,    0, 1320,    0,
      104,    0,    0, 1333,   99, 1352, 1371, 1390, 1410, 1425,
       96, 1446,    0, 1468, 1490,    0, 1507,   96, 1527, 1542,
       96, 1561, 1580, 1600,   95,    0, 1622,    0,    0,    0,
        0,   94,    0,    0, 1642, 1661, 1680, 1699, 1718, 1737,

     1756, 1777,    0, 1799, 1821, 1842, 1861,    0, 1881, 1903,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1918,   62, 1939,    0,    0,   60,    0, 1954, 1964,
        0, 1985, 2007, 2029, 2051,    0,    0,    0,    0,    0,
        0,    0, 2066, 2076, 2097,    0, 2112,  153, 2125, 2135,
        0,    0, 2155,   61,    0,    0,    0, 2175, 2190,   57,
     2211, 2233, 2248,   56, 2269,    0, 2291,    0, 2313, 2335,
     2350, 2359,    0, 2372, 2382,    0, 2402, 2422,   27,    0,
     2444, 2464, 2483, 2502,    0, 2521, 2540,    0,    0, 2561,
     2582, 2601,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 2621,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 2642,    0, 2655,    5, 2676,    0,    0,    4,
        0, 2691, 2701,    0,    0,    0, 2722, 2744,    0,    0,
        0,    0,    0,    0,    0, 2759, 2769, 2790,    0, 2805,
      159, 2818, 2828,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 2849,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3480, 2871, 2878, 2885, 2893, 2901, 2909, 2917, 2925,
     2932, 2940, 2948, 2955, 2962, 2970, 2977, 2985, 2993, 3001,
     3009, 3017, 3025, 3033, 3041, 3049, 3057, 3064, 3071, 3079,

     3087, 3095, 3103, 3111, 3119, 3127, 3135, 3143, 3151, 3159,
     3167, 3175, 3183, 3191, 3199, 3207, 3215, 3223, 3231, 3239,
     3247, 3255, 3263, 3271, 3279, 3287, 3295, 3303, 3311, 3319,
     3327, 3335, 3343, 3351, 3359, 3367, 3375, 3383, 3391, 3399,
     3407, 3415, 3423, 3431, 3439, 3447, 3455, 3463, 3471
    } ;

static const flex_int16_t yy_def[450] =
    {   0,
      372,    1,  372,  372,  373,  372,  372,  372,  374,  372,
      375,  374,    4,  375,  375,  372,    4,  375,  372,    4,
      373,   10,   12,  375,   12,   16,  376,    8,  377,    8,
      378,  379,  378,  380,  372,  381,  382,  380,  372,  375,
      375,  375,  372,  383,   43,  384,  372,  384,   47,  372,
        4,   19,  372,  372,  385,   54,  372,  386,  386,   59,
      387,  377,   33,  388,  379,  377,   35,  372,  389,  390,
       35,  372,   48,  391,  372,  392,  393,  372,  394,  395,
      375,   43,  372,   48,  396,   48,   50,  387,  397,  398,
      391,  399,   47,   59,   59,  372,   43,   43,   48,   47,

       48,   47,   50,    4,  400,  400,  401,  402,  403,  401,
      372,  111,  372,  372,  113,  114,  372,   88,   59,   59,
       59,   88,  404,  404,  405,  406,   68,  372,  389,  390,
      372,  372,  131,  372,  131,  134,  372,   48,   91,   75,
      392,  393,   78,  372,  407,  408,  372,  147,  372,  149,
      372,  372,  397,  398,  147,  409,  410,  151,  411,   47,
       59,   96,    4,  412,  113,  413,  413,  414,  372,  415,
      416,  372,  417,  372,  372,  113,  418,  113,  372,  419,
      420,  414,  421,  372,  167,  167,  372,  174,  174,  113,
      184,  113,  184,  179,  422,  422,  423,  424,  423,  425,

      423,  372,  202,  372,  372,  426,  427,  205,  372,  372,
      204,  202,  202,  204,  205,  205,  202,  205,  202,  209,
      144,  407,  408,  372,  144,  222,  408,  147,  409,  410,
      151,  372,  372,  372,  372,  147,  147,  233,  233,  151,
      232,  232,  428,  429,  372,  232,  430,  431,  428,  429,
      233,  234,  432,  113,  167,  167,  182,  372,  433,  434,
      372,  372,  435,  436,  372,  265,  372,  267,  372,  372,
      437,  438,  265,  439,  440,  269,  441,  372,  167,  167,
      372,  442,  442,  443,  283,  443,  443,  202,  202,  372,
      444,  445,  232,  232,  235,  235,  245,  232,  233,  234,

      235,  235,  372,  235,  249,  250,  232,  232,  235,  235,
      245,  232,  432,  262,  435,  436,  372,  262,  315,  436,
      265,  439,  440,  269,  270,  267,  372,  372,  265,  265,
      267,  267,  269,  270,  270,  446,  447,  372,  270,  448,
      449,  446,  447,  267,  327,  235,  303,  235,  270,  270,
      328,  328,  338,  270,  267,  327,  328,  328,  372,  328,
      342,  343,  270,  270,  328,  328,  338,  270,  328,  359,
      328,    0,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372
    } ;

static const flex_int16_t yy_nxt[3503] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   12,
       13,   14,   15,   16,   17,    4,    4,    4,   12,   18,
        4,   19,   20,   21,  320,  320,   22,   23,   22,   24,
       25,   25,   20,   24,   24,   26,   20,   20,   20,   20,
       25,   24,   20,   20,   28,  277,   29,   29,   30,   31,
       28,   32,   33,   33,   28,   32,   32,   28,   28,   28,
       28,   28,   33,   32,   28,   28,   21,   62,   39,   34,
       41,   34,   39,   35,   81,   42,  320,  264,   36,  178,
      227,  126,  227,   37,   22,   29,   29,  201,   22,   38,
       22,   24,   34,   34,   22,   24,   24,   22,   22,   22,

       22,   22,   34,   24,   22,   22,   21,  107,  107,   34,
       90,   34,  178,  277,  178,  107,  264,  178,   36,   43,
       44,  247,  159,   45,   46,   45,   47,   48,   48,   43,
       49,   49,   50,   43,   43,   43,   43,   48,   49,   43,
       43,   52,   21,  248,  227,   53,   54,   53,   55,   56,
       56,   52,   55,   55,   57,   52,   52,   52,   52,   56,
       55,   52,   52,   44,   77,   77,   59,  146,   59,   59,
      171,  171,   77,   60,   60,   61,  129,  178,  171,  173,
      163,   60,   29,   29,   63,   92,  159,   29,   90,   92,
       39,   29,   29,  146,  129,   62,   56,  104,   64,   29,

       29,   29,   65,   66,   88,   39,   29,   29,   39,   80,
       79,   62,   39,   37,   27,   39,   29,   29,   29,   63,
       51,   39,   29,   40,   39,   27,   29,   29,  372,  372,
      372,  372,  372,  372,   29,   67,   68,  372,   69,   70,
       67,   70,   69,   67,   71,   67,   69,   69,   72,   67,
       67,   67,   67,   67,   69,   67,   67,   44,  372,  372,
       73,  372,   73,   59,  372,  372,  372,   60,   60,   74,
      372,  372,  372,  372,  372,   60,   21,  372,  372,   76,
      372,   76,   77,  372,  372,  372,   77,   77,   78,  372,
      372,  372,  372,  372,   77,   82,   44,  372,  372,   83,

       84,   83,   85,   86,   86,   82,   24,   24,   87,   82,
       82,   82,   82,   86,   24,   82,   82,   44,  372,  372,
       89,  372,   89,   90,  372,  372,  372,  372,  372,   91,
      372,  372,  372,  372,   92,   93,   44,  372,  372,   85,
       94,   85,   85,   95,   95,   93,   24,   24,   96,   93,
       93,   93,   93,   95,   24,   93,   93,   44,  372,  372,
       89,  372,   89,   90,  372,  372,  372,  372,  372,   91,
       97,   44,  372,  372,   98,   99,   98,  100,  101,  101,
       97,  102,  102,  103,   97,   97,   97,   97,  101,  102,
       97,   97,   53,  372,  372,  372,   53,  105,   53,   55,

      106,  106,   53,   55,   55,   53,   53,   53,   53,   53,
      106,   55,   53,   53,   56,   21,  372,  372,  106,   56,
      106,  107,   56,   56,   56,  107,  107,  108,   56,   56,
       56,   56,  109,  107,   56,   56,  110,  372,  372,  107,
      107,  372,  372,  372,  372,  372,  372,  372,  372,  107,
      111,   44,  372,  372,  112,  113,  112,  114,  115,  115,
      111,  116,  116,  117,  111,  111,  111,  111,  115,  116,
      111,  111,   44,  372,  372,   90,  372,   90,   90,  372,
      372,  372,  372,  372,  118,   44,  372,  372,   90,  372,
       90,   90,  372,  372,  372,  372,  372,  118,   44,  372,

      372,  120,  372,  120,  120,  372,  372,  372,  121,  121,
      122,  372,  372,  372,  372,  372,  121,   29,   29,  124,
      372,  372,  125,  372,  372,  372,  125,  125,  372,  372,
      372,  372,  372,  372,  125,   29,   29,   65,   66,  372,
      372,   29,   29,  372,  372,  372,  372,  372,  372,  372,
      372,   29,   68,   68,  372,   69,   69,   68,   69,   69,
       68,  127,   68,   69,   69,  128,   68,   68,   68,   68,
       68,   69,   68,   68,   69,  372,   69,  372,  372,  372,
       69,  372,  130,  372,   69,   69,  372,  372,  372,  372,
      372,  372,   69,  131,  132,  372,   69,  133,  131,  133,

      134,  131,  135,  131,  136,  136,  137,  131,  131,  131,
      131,  131,  136,  131,  131,   44,  372,  372,  138,  372,
      138,  120,  372,  372,  372,  121,  121,  139,  372,  372,
      372,  372,  372,  121,  140,   21,  372,  372,  141,  140,
      141,  142,  140,  140,  140,  142,  142,  143,  140,  140,
      140,  140,  140,  142,  144,  140,  142,  372,  372,  372,
      142,  142,  372,  372,  372,  372,  372,  372,  142,  145,
      147,   44,  372,  372,  148,  147,  148,  149,  147,  147,
      147,  150,  150,  151,  147,  147,  147,  147,  147,  150,
      152,  147,   77,  372,  372,  372,   77,   77,  372,  372,

      372,  372,  372,  372,   77,   83,  372,  372,  372,   83,
      153,   83,   85,   89,   89,   83,   24,   24,   83,   83,
       83,   83,   83,   89,   24,   83,   83,  154,  372,  372,
       90,   90,  372,   24,   24,  372,  372,  372,  372,  372,
       90,   24,   44,  372,  372,  120,  372,  120,  120,  372,
      372,  372,  121,  121,  122,  372,  372,  372,  372,  372,
      121,   44,  372,  372,  138,  372,  138,  120,  372,  372,
      372,  121,  121,  139,  372,  372,  372,  372,  372,  121,
       44,  372,  372,  156,  372,  156,  157,  372,  372,  372,
       77,   77,  158,  372,  372,  372,  372,  372,   77,  160,

       44,  372,  372,  100,  161,  100,  100,  119,  119,  160,
      102,  102,  162,  160,  160,  160,  160,  119,  102,  160,
      160,  107,  372,  372,  372,  107,  107,  372,  372,  372,
      372,  372,  164,  107,  107,  372,  372,  372,  107,  107,
      372,  372,  372,  372,  372,  372,  107,   44,  372,  372,
      165,  372,  165,  166,  372,  372,  372,  167,  167,  168,
      372,  372,  372,  372,  372,  167,   21,  372,  372,  170,
      372,  170,  171,  372,  372,  372,  171,  171,  172,  372,
      372,  372,  372,  372,  171,  174,   44,  372,  372,  175,
      176,  175,  177,  178,  178,  174,   55,   55,  179,  174,

      174,  174,  174,  178,   55,  174,  174,  178,   44,  372,
      372,  180,  178,  180,  181,  178,  178,  178,  107,  107,
      182,  178,  178,  178,  178,  183,  107,  178,  178,  184,
       44,  372,  372,  177,  185,  177,  177,  186,  186,  184,
       55,   55,  187,  184,  184,  184,  184,  186,   55,  184,
      184,  188,   44,  372,  372,  189,  190,  189,  191,  192,
      192,  188,  193,  193,  194,  188,  188,  188,  188,  192,
      193,  188,  188,   29,   29,  196,  372,  372,  197,  372,
      372,  372,  197,  197,  372,  372,  372,  372,  372,  372,
      197,  198,   29,   29,  196,  372,  372,  197,  372,  372,

      372,  197,  197,  372,  372,  372,  372,  372,  372,  197,
      198,   29,   29,  199,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  200,
      202,  132,  372,   69,  134,  202,  134,  134,  202,  203,
      202,  136,  136,  204,  202,  202,  202,  202,  202,  136,
      202,  202,   69,  372,   69,  372,  372,  372,   69,  372,
      130,  372,   69,   69,  372,  372,  372,  372,  372,  372,
       69,  205,  132,  372,   69,  206,  205,  206,  207,  205,
      208,  205,   69,   69,  209,  205,  205,  205,  205,  205,
       69,  205,  205,  132,  132,  372,   69,   69,  132,   69,

       69,  132,  210,  132,   69,   69,  211,  132,  132,  132,
      132,  132,   69,  132,  132,  212,  132,  372,   69,  207,
      212,  207,  207,  212,  213,  212,   69,   69,  214,  212,
      212,  212,  212,  212,   69,  212,  212,  215,  132,  372,
       69,  216,  215,  216,  217,  215,  218,  215,  219,  219,
      220,  215,  215,  215,  215,  215,  219,  215,  215,  142,
      372,  372,  372,  142,  142,  372,  372,  372,  372,  372,
      372,  142,  145,  221,   21,  372,  372,  222,  221,  222,
      223,  221,  221,  221,  223,  223,  224,  221,  221,  221,
      221,  221,  223,  225,  221,  223,  372,  372,  372,  223,

      223,  372,  372,  372,  372,  372,  372,  223,  226,  228,
       44,  372,  372,  229,  228,  229,  230,  228,  228,  228,
      142,  142,  231,  228,  228,  228,  228,  228,  142,  232,
      228,  233,   44,  372,  372,  230,  233,  230,  230,  233,
      233,  233,  142,  142,  234,  233,  233,  233,  233,  233,
      142,  235,  233,  236,   44,  372,  372,  237,  236,  237,
      238,  236,  236,  236,  239,  239,  240,  236,  236,  236,
      236,  236,  239,  241,  236,  242,   44,  372,  372,  243,
      242,  243,  244,  242,  242,  242,  223,  223,  245,  242,
      242,  242,  242,  242,  223,  246,  242,  230,  372,  372,

      372,  142,  142,  372,  372,  372,  372,  372,  372,  142,
      249,  142,  142,  372,  372,  372,  372,  372,  372,  142,
      250,   44,  372,  372,  157,  372,  157,  157,  372,  372,
      372,   77,   77,  252,  372,  372,  372,  372,  372,   77,
      171,  372,  372,  372,  171,  171,  372,  372,  372,  372,
      372,  372,  171,   44,  372,  372,  181,  372,  181,  181,
      372,  372,  372,  107,  107,  253,  372,  372,  372,  372,
      372,  107,   44,  372,  372,  181,  372,  181,  181,  372,
      372,  372,  107,  107,  253,  372,  372,  372,  372,  372,
      107,   44,  372,  372,  254,  372,  254,  255,  372,  372,

      372,  256,  256,  257,  372,  372,  372,  372,  372,  256,
      258,   21,  372,  372,  259,  258,  259,  260,  258,  258,
      258,  260,  260,  261,  258,  258,  258,  258,  258,  260,
      262,  258,  260,  372,  372,  372,  260,  260,  372,  372,
      372,  372,  372,  372,  260,  263,  265,   44,  372,  372,
      266,  265,  266,  267,  265,  265,  265,  268,  268,  269,
      265,  265,  265,  265,  265,  268,  270,  265,  174,   44,
      372,  372,  175,  176,  175,  177,  178,  178,  174,   55,
       55,  179,  174,  174,  174,  174,  178,   55,  174,  174,
      175,  372,  372,  372,  175,  271,  175,  177,  180,  180,

      175,   55,   55,  175,  175,  175,  175,  175,  180,   55,
      175,  175,  272,  372,  372,  181,  181,  372,   55,   55,
      372,  372,  372,  372,  372,  181,   55,  188,   44,  372,
      372,  189,  190,  189,  191,  192,  192,  188,  193,  193,
      194,  188,  188,  188,  188,  192,  193,  188,  188,  181,
      372,  372,  372,  107,  107,  372,  372,  372,  372,  372,
      372,  107,   44,  372,  372,  254,  372,  254,  255,  372,
      372,  372,  256,  256,  257,  372,  372,  372,  372,  372,
      256,   44,  372,  372,  274,  372,  274,  275,  372,  372,
      372,  171,  171,  276,  372,  372,  372,  372,  372,  171,

      184,   44,  372,  372,  177,  185,  177,  177,  186,  186,
      184,   55,   55,  187,  184,  184,  184,  184,  186,   55,
      184,  184,  278,   44,  372,  372,  191,  279,  191,  191,
      280,  280,  278,  193,  193,  281,  278,  278,  278,  278,
      280,  193,  278,  278,   29,   29,  196,  372,  372,  197,
      372,  372,  372,  197,  197,  372,  372,  372,  372,  372,
      372,  197,  198,   29,   29,  196,  372,  372,  197,  372,
      372,  372,  197,  197,  372,  372,  372,  372,  372,  372,
      197,  198,   29,   29,  199,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      200,   29,   29,  283,  372,  372,  284,  372,  372,  372,
      284,  284,  372,  372,  372,  372,  372,  372,  284,  285,
       29,   29,  199,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  200,   29,
       29,  286,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  287,   29,   29,
      199,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  200,  212,  132,  372,
       69,  207,  212,  207,  207,  212,  213,  212,   69,   69,
      214,  212,  212,  212,  212,  212,   69,  212,  212,  288,

      132,  372,   69,  217,  288,  217,  217,  288,  289,  288,
      219,  219,  290,  288,  288,  288,  288,  288,  219,  288,
      288,  205,  132,  372,   69,  206,  205,  206,  207,  205,
      208,  205,   69,   69,  209,  205,  205,  205,  205,  205,
       69,  205,  205,   69,  372,   69,  372,  372,  372,  207,
      372,  291,  372,   69,   69,  372,  372,  372,  372,  372,
      372,   69,   69,  372,   69,  372,  372,  372,  372,  372,
      292,  372,   69,   69,  372,  372,  372,  372,  372,  372,
       69,  215,  132,  372,   69,  216,  215,  216,  217,  215,
      218,  215,  219,  219,  220,  215,  215,  215,  215,  215,

      219,  215,  215,  132,  132,  372,   69,   69,  132,   69,
       69,  132,  210,  132,   69,   69,  211,  132,  132,  132,
      132,  132,   69,  132,  132,  223,  372,  372,  372,  223,
      223,  372,  372,  372,  372,  372,  372,  223,  226,  293,
       44,  372,  372,  294,  293,  294,  295,  293,  293,  293,
      296,  296,  297,  293,  293,  293,  293,  293,  296,  298,
      293,  230,  372,  372,  372,  142,  142,  372,  372,  372,
      372,  372,  372,  142,  249,  142,  142,  372,  372,  372,
      372,  372,  372,  142,  250,  242,   44,  372,  372,  243,
      242,  243,  244,  242,  242,  242,  223,  223,  245,  242,

      242,  242,  242,  242,  223,  246,  242,  233,   44,  372,
      372,  230,  233,  230,  230,  233,  233,  233,  142,  142,
      234,  233,  233,  233,  233,  233,  142,  235,  233,  299,
       44,  372,  372,  238,  299,  238,  238,  299,  299,  299,
      239,  239,  300,  299,  299,  299,  299,  299,  239,  301,
      299,  302,   44,  372,  372,  244,  302,  244,  244,  302,
      302,  302,  223,  223,  303,  302,  302,  302,  302,  302,
      223,  304,  302,  244,  372,  372,  372,  223,  223,  372,
      372,  372,  372,  372,  372,  223,  305,  223,  223,  372,
      372,  372,  372,  372,  372,  223,  306,  307,   44,  372,

      372,  308,  307,  308,  309,  307,  307,  307,  310,  310,
      311,  307,  307,  307,  307,  307,  310,  312,  307,  157,
      372,  372,  372,   77,   77,  372,  372,  372,  372,  372,
      372,   77,  244,  372,  372,  372,  223,  223,  372,  372,
      372,  372,  372,  372,  223,  305,  223,  223,  372,  372,
      372,  372,  372,  372,  223,  306,   44,  372,  372,  255,
      372,  255,  255,  372,  372,  372,  256,  256,  313,  372,
      372,  372,  372,  372,  256,  258,   21,  372,  372,  259,
      258,  259,  260,  258,  258,  258,  260,  260,  261,  258,
      258,  258,  258,  258,  260,  262,  258,  260,  372,  372,

      372,  260,  260,  372,  372,  372,  372,  372,  372,  260,
      263,  265,   44,  372,  372,  266,  265,  266,  267,  265,
      265,  265,  268,  268,  269,  265,  265,  265,  265,  265,
      268,  270,  265,  314,   21,  372,  372,  315,  314,  315,
      316,  314,  314,  314,  316,  316,  317,  314,  314,  314,
      314,  314,  316,  318,  314,  316,  372,  372,  372,  316,
      316,  372,  372,  372,  372,  372,  372,  316,  319,  321,
       44,  372,  372,  322,  321,  322,  323,  321,  321,  321,
      260,  260,  324,  321,  321,  321,  321,  321,  260,  325,
      321,  326,   44,  372,  372,  323,  326,  323,  323,  326,

      326,  326,  260,  260,  327,  326,  326,  326,  326,  326,
      260,  328,  326,  329,   44,  372,  372,  330,  329,  330,
      331,  329,  329,  329,  332,  332,  333,  329,  329,  329,
      329,  329,  332,  334,  329,  335,   44,  372,  372,  336,
      335,  336,  337,  335,  335,  335,  316,  316,  338,  335,
      335,  335,  335,  335,  316,  339,  335,  181,  372,  372,
      372,  107,  107,  372,  372,  372,  372,  372,  340,  107,
      107,  107,  372,  372,  372,  372,  372,  341,  107,  323,
      372,  372,  372,  260,  260,  372,  372,  372,  372,  372,
      372,  260,  342,  260,  260,  372,  372,  372,  372,  372,

      372,  260,  343,   44,  372,  372,  275,  372,  275,  275,
      372,  372,  372,  171,  171,  345,  372,  372,  372,  372,
      372,  171,  184,   44,  372,  372,  177,  185,  177,  177,
      186,  186,  184,   55,   55,  187,  184,  184,  184,  184,
      186,   55,  184,  184,  278,   44,  372,  372,  191,  279,
      191,  191,  280,  280,  278,  193,  193,  281,  278,  278,
      278,  278,  280,  193,  278,  278,   29,   29,  283,  372,
      372,  284,  372,  372,  372,  284,  284,  372,  372,  372,
      372,  372,  372,  284,  285,   29,   29,  283,  372,  372,
      284,  372,  372,  372,  284,  284,  372,  372,  372,  372,

      372,  372,  284,  285,   29,   29,  286,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  287,   29,   29,  286,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  287,   29,   29,  286,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      287,  288,  132,  372,   69,  217,  288,  217,  217,  288,
      289,  288,  219,  219,  290,  288,  288,  288,  288,  288,
      219,  288,  288,   69,  372,   69,  372,  372,  372,  207,
      372,  291,  372,   69,   69,  372,  372,  372,  372,  372,

      372,   69,   69,  372,   69,  372,  372,  372,  372,  372,
      292,  372,   69,   69,  372,  372,  372,  372,  372,  372,
       69,  346,   44,  372,  372,  309,  346,  309,  309,  346,
      346,  346,  310,  310,  347,  346,  346,  346,  346,  346,
      310,  348,  346,   44,  372,  372,  255,  372,  255,  255,
      372,  372,  372,  256,  256,  313,  372,  372,  372,  372,
      372,  256,  316,  372,  372,  372,  316,  316,  372,  372,
      372,  372,  372,  372,  316,  319,  349,   44,  372,  372,
      350,  349,  350,  351,  349,  349,  349,  352,  352,  353,
      349,  349,  349,  349,  349,  352,  354,  349,  323,  372,

      372,  372,  260,  260,  372,  372,  372,  372,  372,  372,
      260,  342,  260,  260,  372,  372,  372,  372,  372,  372,
      260,  343,  355,   44,  372,  372,  331,  355,  331,  331,
      355,  355,  355,  332,  332,  356,  355,  355,  355,  355,
      355,  332,  357,  355,  358,   44,  372,  372,  337,  358,
      337,  337,  358,  358,  358,  316,  316,  359,  358,  358,
      358,  358,  358,  316,  360,  358,  337,  372,  372,  372,
      316,  316,  372,  372,  372,  372,  372,  372,  316,  361,
      316,  316,  372,  372,  372,  372,  372,  372,  316,  362,
      363,   44,  372,  372,  364,  363,  364,  365,  363,  363,

      363,  366,  366,  367,  363,  363,  363,  363,  363,  366,
      368,  363,  275,  372,  372,  372,  171,  171,  372,  372,
      372,  372,  372,  372,  171,  337,  372,  372,  372,  316,
      316,  372,  372,  372,  372,  372,  372,  316,  361,  316,
      316,  372,  372,  372,  372,  372,  372,  316,  362,  369,
       44,  372,  372,  365,  369,  365,  365,  369,  369,  369,
      366,  366,  370,  369,  369,  369,  369,  369,  366,  371,
      369,   21,   21,  372,  372,  372,  372,   21,   25,   25,
      372,  372,   25,  372,   25,   24,  372,  372,  372,   24,
       24,  372,   24,   58,   58,  372,  372,   58,   58,   58,

       58,   29,  372,   29,   29,   29,   29,   29,   29,   33,
      372,   33,   33,   33,   33,   33,   33,   32,  372,   32,
       32,   32,   32,   32,   32,   34,  372,  372,  372,   34,
      372,   34,   48,   48,  372,  372,   48,   48,   48,   48,
       75,   75,  372,  372,   75,   75,   75,   75,   44,   44,
      372,  372,  372,  372,   44,   86,   86,  372,  372,   86,
       86,   86,   55,  372,  372,  372,   55,   55,   55,   55,
       95,   95,  372,  372,   95,   95,   95,  119,  119,  372,
      372,  119,  119,  119,  119,  123,  372,  123,  123,  123,
      123,  123,  123,   69,   69,  372,   69,   69,   69,   69,

       69,   70,   70,  372,   70,   70,   70,   70,   70,  101,
      101,  372,  372,  101,  101,  101,  101,  141,  372,  372,
      372,  141,  141,  141,  141,  142,  372,  372,  372,  142,
      142,  142,  142,   76,  372,  372,  372,   76,   76,   76,
       76,   77,  372,  372,  372,   77,   77,   77,   77,   85,
      372,  372,  372,   85,   85,   85,   85,   89,  372,  372,
      372,   89,   89,   89,   90,  372,  372,  372,   90,   90,
       90,  155,  155,  372,  372,  155,  155,  155,  155,  106,
      372,  372,  372,  106,  106,  106,  106,  107,  372,  372,
      372,  107,  107,  107,  107,  115,  115,  372,  372,  115,

      115,  115,  115,  169,  169,  372,  372,  169,  169,  169,
      169,  195,  372,  195,  195,  195,  195,  195,  195,  197,
      372,  197,  197,  197,  197,  197,  197,  125,  372,  125,
      125,  125,  125,  125,  125,  222,  372,  372,  372,  222,
      222,  222,  222,  223,  372,  372,  372,  223,  223,  223,
      223,  229,  372,  372,  372,  229,  229,  229,  229,  230,
      372,  372,  372,  230,  230,  230,  230,  251,  251,  372,
      372,  251,  251,  251,  251,  170,  372,  372,  372,  170,
      170,  170,  170,  186,  186,  372,  372,  186,  186,  186,
      186,  192,  192,  372,  372,  192,  192,  192,  192,  259,

      372,  372,  372,  259,  259,  259,  259,  260,  372,  372,
      372,  260,  260,  260,  260,  171,  372,  372,  372,  171,
      171,  171,  171,  177,  372,  372,  372,  177,  177,  177,
      177,  180,  372,  372,  372,  180,  180,  180,  180,  181,
      372,  372,  372,  181,  181,  181,  181,  273,  273,  372,
      372,  273,  273,  273,  273,  195,  372,  195,  195,  195,
      195,  195,  195,  197,  372,  197,  197,  197,  197,  197,
      197,  282,  372,  282,  282,  282,  282,  282,  282,  284,
      372,  284,  284,  284,  284,  284,  284,  206,  206,  372,
      206,  206,  206,  206,  206,  207,  207,  372,  207,  207,

      207,  207,  207,  243,  372,  372,  372,  243,  243,  243,
      243,  244,  372,  372,  372,  244,  244,  244,  244,  156,
      372,  372,  372,  156,  156,  156,  156,  157,  372,  372,
      372,  157,  157,  157,  157,  280,  280,  372,  372,  280,
      280,  280,  280,  259,  372,  372,  372,  259,  259,  259,
      259,  260,  372,  372,  372,  260,  260,  260,  260,  315,
      372,  372,  372,  315,  315,  315,  315,  316,  372,  372,
      372,  316,  316,  316,  316,  180,  372,  372,  372,  180,
      180,  180,  180,  181,  372,  372,  372,  181,  181,  181,
      181,  322,  372,  372,  372,  322,  322,  322,  322,  323,

      372,  372,  372,  323,  323,  323,  323,  344,  344,  372,
      372,  344,  344,  344,  344,  282,  372,  282,  282,  282,
      282,  282,  282,  284,  372,  284,  284,  284,  284,  284,
      284,  206,  206,  372,  206,  206,  206,  206,  206,  207,
      207,  372,  207,  207,  207,  207,  207,  336,  372,  372,
      372,  336,  336,  336,  336,  337,  372,  372,  372,  337,
      337,  337,  337,  274,  372,  372,  372,  274,  274,  274,
      274,  275,  372,  372,  372,  275,  275,  275,  275,    3,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  372
    } ;

static const flex_int16_t yy_chk[3503] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    4,    4,  320,  316,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    8,  279,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    9,   66,   15,    9,
       15,    9,   42,    9,   42,   15,  264,  260,    9,  254,
      227,   66,  223,    9,   10,  126,  126,  126,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,

       10,   10,   10,   10,   10,   10,   12,  181,  181,   12,
      153,   12,  192,  185,  178,  181,  171,  165,   12,   16,
       16,  153,  161,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   19,   19,  154,  146,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   27,  248,  248,   27,  142,   27,   27,
      341,  341,  248,   27,   27,   27,  129,  115,  341,  110,
      104,   27,   31,   31,   31,   99,   94,   31,   89,   84,
       81,   31,   31,   77,   69,   62,   56,   51,   31,   31,

       32,   32,   32,   32,   44,   41,   32,   32,   40,   39,
       38,   29,   24,   23,   21,   18,   32,   33,   33,   33,
       17,   14,   33,   13,   11,    5,   33,   33,    3,    0,
        0,    0,    0,    0,   33,   35,   35,    0,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   36,    0,    0,
       36,    0,   36,   36,    0,    0,    0,   36,   36,   36,
        0,    0,    0,    0,    0,   36,   37,    0,    0,   37,
        0,   37,   37,    0,    0,    0,   37,   37,   37,    0,
        0,    0,    0,    0,   37,   43,   43,    0,    0,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   46,    0,    0,
       46,    0,   46,   46,    0,    0,    0,    0,    0,   46,
        0,    0,    0,    0,   46,   47,   47,    0,    0,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   48,    0,    0,
       48,    0,   48,   48,    0,    0,    0,    0,    0,   48,
       50,   50,    0,    0,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   53,    0,    0,    0,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   54,   54,    0,    0,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   55,    0,    0,   55,
       55,    0,    0,    0,    0,    0,    0,    0,    0,   55,
       57,   57,    0,    0,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   58,    0,    0,   58,    0,   58,   58,    0,
        0,    0,    0,    0,   58,   59,    0,    0,   59,    0,
       59,   59,    0,    0,    0,    0,    0,   59,   61,    0,

        0,   61,    0,   61,   61,    0,    0,    0,   61,   61,
       61,    0,    0,    0,    0,    0,   61,   64,   64,   64,
        0,    0,   64,    0,    0,    0,   64,   64,    0,    0,
        0,    0,    0,    0,   64,   65,   65,   65,   65,    0,
        0,   65,   65,    0,    0,    0,    0,    0,    0,    0,
        0,   65,   68,   68,    0,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   70,    0,   70,    0,    0,    0,
       70,    0,   70,    0,   70,   70,    0,    0,    0,    0,
        0,    0,   70,   72,   72,    0,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   74,    0,    0,   74,    0,
       74,   74,    0,    0,    0,   74,   74,   74,    0,    0,
        0,    0,    0,   74,   75,   75,    0,    0,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   76,    0,    0,    0,
       76,   76,    0,    0,    0,    0,    0,    0,   76,   76,
       78,   78,    0,    0,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   79,    0,    0,    0,   79,   79,    0,    0,

        0,    0,    0,    0,   79,   83,    0,    0,    0,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   85,    0,    0,
       85,   85,    0,   85,   85,    0,    0,    0,    0,    0,
       85,   85,   88,    0,    0,   88,    0,   88,   88,    0,
        0,    0,   88,   88,   88,    0,    0,    0,    0,    0,
       88,   91,    0,    0,   91,    0,   91,   91,    0,    0,
        0,   91,   91,   91,    0,    0,    0,    0,    0,   91,
       92,    0,    0,   92,    0,   92,   92,    0,    0,    0,
       92,   92,   92,    0,    0,    0,    0,    0,   92,   96,

       96,    0,    0,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,  105,    0,    0,    0,  105,  105,    0,    0,    0,
        0,    0,  105,  105,  106,    0,    0,    0,  106,  106,
        0,    0,    0,    0,    0,    0,  106,  108,    0,    0,
      108,    0,  108,  108,    0,    0,    0,  108,  108,  108,
        0,    0,    0,    0,    0,  108,  109,    0,    0,  109,
        0,  109,  109,    0,    0,    0,  109,  109,  109,    0,
        0,    0,    0,    0,  109,  111,  111,    0,    0,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  113,  113,    0,
        0,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  114,
      114,    0,    0,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  117,  117,    0,    0,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  123,  123,  123,    0,    0,  123,    0,
        0,    0,  123,  123,    0,    0,    0,    0,    0,    0,
      123,  123,  124,  124,  124,    0,    0,  124,    0,    0,

        0,  124,  124,    0,    0,    0,    0,    0,    0,  124,
      124,  125,  125,  125,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  125,
      128,  128,    0,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  130,    0,  130,    0,    0,    0,  130,    0,
      130,    0,  130,  130,    0,    0,    0,    0,    0,    0,
      130,  131,  131,    0,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  132,  132,    0,  132,  132,  132,  132,

      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  134,  134,    0,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  137,  137,    0,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  141,
        0,    0,    0,  141,  141,    0,    0,    0,    0,    0,
        0,  141,  141,  144,  144,    0,    0,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  145,    0,    0,    0,  145,

      145,    0,    0,    0,    0,    0,    0,  145,  145,  147,
      147,    0,    0,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  149,  149,    0,    0,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  151,  151,    0,    0,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  152,  152,    0,    0,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  156,    0,    0,

        0,  156,  156,    0,    0,    0,    0,    0,    0,  156,
      156,  157,  157,    0,    0,    0,    0,    0,    0,  157,
      157,  159,    0,    0,  159,    0,  159,  159,    0,    0,
        0,  159,  159,  159,    0,    0,    0,    0,    0,  159,
      164,    0,    0,    0,  164,  164,    0,    0,    0,    0,
        0,    0,  164,  166,    0,    0,  166,    0,  166,  166,
        0,    0,    0,  166,  166,  166,    0,    0,    0,    0,
        0,  166,  167,    0,    0,  167,    0,  167,  167,    0,
        0,    0,  167,  167,  167,    0,    0,    0,    0,    0,
      167,  168,    0,    0,  168,    0,  168,  168,    0,    0,

        0,  168,  168,  168,    0,    0,    0,    0,    0,  168,
      169,  169,    0,    0,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  170,    0,    0,    0,  170,  170,    0,    0,
        0,    0,    0,    0,  170,  170,  172,  172,    0,    0,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  174,  174,
        0,    0,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      175,    0,    0,    0,  175,  175,  175,  175,  175,  175,

      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  177,    0,    0,  177,  177,    0,  177,  177,
        0,    0,    0,    0,    0,  177,  177,  179,  179,    0,
        0,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  180,
        0,    0,    0,  180,  180,    0,    0,    0,    0,    0,
        0,  180,  182,    0,    0,  182,    0,  182,  182,    0,
        0,    0,  182,  182,  182,    0,    0,    0,    0,    0,
      182,  183,    0,    0,  183,    0,  183,  183,    0,    0,
        0,  183,  183,  183,    0,    0,    0,    0,    0,  183,

      184,  184,    0,    0,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  187,  187,    0,    0,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  195,  195,  195,    0,    0,  195,
        0,    0,    0,  195,  195,    0,    0,    0,    0,    0,
        0,  195,  195,  196,  196,  196,    0,    0,  196,    0,
        0,    0,  196,  196,    0,    0,    0,    0,    0,    0,
      196,  196,  197,  197,  197,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      197,  198,  198,  198,    0,    0,  198,    0,    0,    0,
      198,  198,    0,    0,    0,    0,    0,    0,  198,  198,
      199,  199,  199,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  199,  200,
      200,  200,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  200,  201,  201,
      201,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  201,  202,  202,    0,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  204,

      204,    0,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  205,  205,    0,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  206,    0,  206,    0,    0,    0,  206,
        0,  206,    0,  206,  206,    0,    0,    0,    0,    0,
        0,  206,  207,    0,  207,    0,    0,    0,    0,    0,
      207,    0,  207,  207,    0,    0,    0,    0,    0,    0,
      207,  209,  209,    0,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,

      209,  209,  209,  210,  210,    0,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  222,    0,    0,    0,  222,
      222,    0,    0,    0,    0,    0,    0,  222,  222,  224,
      224,    0,    0,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  229,    0,    0,    0,  229,  229,    0,    0,    0,
        0,    0,    0,  229,  229,  230,  230,    0,    0,    0,
        0,    0,    0,  230,  230,  232,  232,    0,    0,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  233,  233,    0,
        0,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  234,
      234,    0,    0,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  235,  235,    0,    0,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  243,    0,    0,    0,  243,  243,    0,
        0,    0,    0,    0,    0,  243,  243,  244,  244,    0,
        0,    0,    0,    0,    0,  244,  244,  245,  245,    0,

        0,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  247,
        0,    0,    0,  247,  247,    0,    0,    0,    0,    0,
        0,  247,  249,    0,    0,    0,  249,  249,    0,    0,
        0,    0,    0,    0,  249,  249,  250,  250,    0,    0,
        0,    0,    0,    0,  250,  250,  253,    0,    0,  253,
        0,  253,  253,    0,    0,    0,  253,  253,  253,    0,
        0,    0,    0,    0,  253,  258,  258,    0,    0,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  259,    0,    0,

        0,  259,  259,    0,    0,    0,    0,    0,    0,  259,
      259,  261,  261,    0,    0,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  262,  262,    0,    0,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  263,    0,    0,    0,  263,
      263,    0,    0,    0,    0,    0,    0,  263,  263,  265,
      265,    0,    0,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  267,  267,    0,    0,  267,  267,  267,  267,  267,

      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  269,  269,    0,    0,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  270,  270,    0,    0,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  271,    0,    0,
        0,  271,  271,    0,    0,    0,    0,    0,  271,  271,
      272,  272,    0,    0,    0,    0,    0,  272,  272,  274,
        0,    0,    0,  274,  274,    0,    0,    0,    0,    0,
        0,  274,  274,  275,  275,    0,    0,    0,    0,    0,

        0,  275,  275,  277,    0,    0,  277,    0,  277,  277,
        0,    0,    0,  277,  277,  277,    0,    0,    0,    0,
        0,  277,  278,  278,    0,    0,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  281,  281,    0,    0,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  282,  282,  282,    0,
        0,  282,    0,    0,    0,  282,  282,    0,    0,    0,
        0,    0,    0,  282,  282,  283,  283,  283,    0,    0,
      283,    0,    0,    0,  283,  283,    0,    0,    0,    0,

        0,    0,  283,  283,  284,  284,  284,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  284,  286,  286,  286,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  286,  287,  287,  287,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      287,  290,  290,    0,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  291,    0,  291,    0,    0,    0,  291,
        0,  291,    0,  291,  291,    0,    0,    0,    0,    0,

        0,  291,  292,    0,  292,    0,    0,    0,    0,    0,
      292,    0,  292,  292,    0,    0,    0,    0,    0,    0,
      292,  303,  303,    0,    0,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  313,    0,    0,  313,    0,  313,  313,
        0,    0,    0,  313,  313,  313,    0,    0,    0,    0,
        0,  313,  315,    0,    0,    0,  315,  315,    0,    0,
        0,    0,    0,    0,  315,  315,  317,  317,    0,    0,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  322,    0,

        0,    0,  322,  322,    0,    0,    0,    0,    0,    0,
      322,  322,  323,  323,    0,    0,    0,    0,    0,    0,
      323,  323,  327,  327,    0,    0,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  328,  328,    0,    0,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  336,    0,    0,    0,
      336,  336,    0,    0,    0,    0,    0,    0,  336,  336,
      337,  337,    0,    0,    0,    0,    0,    0,  337,  337,
      338,  338,    0,    0,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  340,    0,    0,    0,  340,  340,    0,    0,
        0,    0,    0,    0,  340,  342,    0,    0,    0,  342,
      342,    0,    0,    0,    0,    0,    0,  342,  342,  343,
      343,    0,    0,    0,    0,    0,    0,  343,  343,  359,
      359,    0,    0,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  373,  373,    0,    0,    0,    0,  373,  374,  374,
        0,    0,  374,    0,  374,  375,    0,    0,    0,  375,
      375,    0,  375,  376,  376,    0,    0,  376,  376,  376,

      376,  377,    0,  377,  377,  377,  377,  377,  377,  378,
        0,  378,  378,  378,  378,  378,  378,  379,    0,  379,
      379,  379,  379,  379,  379,  380,    0,    0,    0,  380,
        0,  380,  381,  381,    0,    0,  381,  381,  381,  381,
      382,  382,    0,    0,  382,  382,  382,  382,  383,  383,
        0,    0,    0,    0,  383,  384,  384,    0,    0,  384,
      384,  384,  385,    0,    0,    0,  385,  385,  385,  385,
      386,  386,    0,    0,  386,  386,  386,  387,  387,    0,
        0,  387,  387,  387,  387,  388,    0,  388,  388,  388,
      388,  388,  388,  389,  389,    0,  389,  389,  389,  389,

      389,  390,  390,    0,  390,  390,  390,  390,  390,  391,
      391,    0,    0,  391,  391,  391,  391,  392,    0,    0,
        0,  392,  392,  392,  392,  393,    0,    0,    0,  393,
      393,  393,  393,  394,    0,    0,    0,  394,  394,  394,
      394,  395,    0,    0,    0,  395,  395,  395,  395,  396,
        0,    0,    0,  396,  396,  396,  396,  397,    0,    0,
        0,  397,  397,  397,  398,    0,    0,    0,  398,  398,
      398,  399,  399,    0,    0,  399,  399,  399,  399,  400,
        0,    0,    0,  400,  400,  400,  400,  401,    0,    0,
        0,  401,  401,  401,  401,  402,  402,    0,    0,  402,

      402,  402,  402,  403,  403,    0,    0,  403,  403,  403,
      403,  404,    0,  404,  404,  404,  404,  404,  404,  405,
        0,  405,  405,  405,  405,  405,  405,  406,    0,  406,
      406,  406,  406,  406,  406,  407,    0,    0,    0,  407,
      407,  407,  407,  408,    0,    0,    0,  408,  408,  408,
      408,  409,    0,    0,    0,  409,  409,  409,  409,  410,
        0,    0,    0,  410,  410,  410,  410,  411,  411,    0,
        0,  411,  411,  411,  411,  412,    0,    0,    0,  412,
      412,  412,  412,  413,  413,    0,    0,  413,  413,  413,
      413,  414,  414,    0,    0,  414,  414,  414,  414,  415,

        0,    0,    0,  415,  415,  415,  415,  416,    0,    0,
        0,  416,  416,  416,  416,  417,    0,    0,    0,  417,
      417,  417,  417,  418,    0,    0,    0,  418,  418,  418,
      418,  419,    0,    0,    0,  419,  419,  419,  419,  420,
        0,    0,    0,  420,  420,  420,  420,  421,  421,    0,
        0,  421,  421,  421,  421,  422,    0,  422,  422,  422,
      422,  422,  422,  423,    0,  423,  423,  423,  423,  423,
      423,  424,    0,  424,  424,  424,  424,  424,  424,  425,
        0,  425,  425,  425,  425,  425,  425,  426,  426,    0,
      426,  426,  426,  426,  426,  427,  427,    0,  427,  427,

      427,  427,  427,  428,    0,    0,    0,  428,  428,  428,
      428,  429,    0,    0,    0,  429,  429,  429,  429,  430,
        0,    0,    0,  430,  430,  430,  430,  431,    0,    0,
        0,  431,  431,  431,  431,  432,  432,    0,    0,  432,
      432,  432,  432,  433,    0,    0,    0,  433,  433,  433,
      433,  434,    0,    0,    0,  434,  434,  434,  434,  435,
        0,    0,    0,  435,  435,  435,  435,  436,    0,    0,
        0,  436,  436,  436,  436,  437,    0,    0,    0,  437,
      437,  437,  437,  438,    0,    0,    0,  438,  438,  438,
      438,  439,    0,    0,    0,  439,  439,  439,  439,  440,

        0,    0,    0,  440,  440,  440,  440,  441,  441,    0,
        0,  441,  441,  441,  441,  442,    0,  442,  442,  442,
      442,  442,  442,  443,    0,  443,  443,  443,  443,  443,
      443,  444,  444,    0,  444,  444,  444,  444,  444,  445,
      445,    0,  445,  445,  445,  445,  445,  446,    0,    0,
        0,  446,  446,  446,  446,  447,    0,    0,    0,  447,
      447,  447,  447,  448,    0,    0,    0,  448,  448,  448,
      448,  449,    0,    0,    0,  449,  449,  449,  449,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  372
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[19] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"

#include <cstring>
#include "y.tab.hh"
#include "shell.hh"
#include <string>
#include <unistd.h>



extern "C" char * read_line();

int mygetc(FILE * f) {
  static char *p;
  char ch;

     if (!isatty(0)) {
  // stdin is not a tty. Call real getc
    return getc(f);
  }

  // stdin is a tty. Call our read_line.
  if (p==NULL || *p == 0) {
    char * s = read_line();
    p = s;
  }

  ch = *p;
  p++;

  return ch;
}

#undef getc
#define getc(f) mygetc(f)




static void yyunput (int c,char *buf_ptr  );

char * goodbye_message = (char *) "\n  Good bye!!\n\n";

void myunputc(int c) {
  unput(c);
}

void source(FILE * file) {
  // set the source detect bool to TRUE
  Shell::_source = true;
  YY_BUFFER_STATE old = YY_CURRENT_BUFFER;
  YY_BUFFER_STATE buffer = yy_create_buffer(file, YY_BUF_SIZE);
  yypush_buffer_state(buffer);
  yyparse();
  yy_switch_to_buffer(old);
  // set the source detect bool to FALSE
  Shell::_source = false;
  Shell::prompt();
}

void shellrc() {
  FILE * shellrc = fopen(".shellrc", "r");
  if (shellrc) {
    Shell::_source = true;
    // set shellrc as input buffer
    yyrestart(shellrc);
    // start executing the commands in shellrc
    yyparse();
    // restart the input buffer back to stdin
    yyrestart(stdin);
    fclose(shellrc);
    Shell::_source = false;
  }
}

#line 1462 "lex.yy.cc"
#line 1463 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 89 "shell.l"


#line 1683 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 373 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3480 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 91 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 95 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 99 "shell.l"
{
  return PIPE;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 103 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 107 "shell.l"
{
  return LESS;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 111 "shell.l"
{
  return AMPERSAND;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 115 "shell.l"
{
  return GREATAMPERSAND;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 119 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 123 "shell.l"
{
  return GREATGREATAMPERSAND;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 127 "shell.l"
{
  return TWOGREAT;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 131 "shell.l"
{
  return EXIT;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 136 "shell.l"
{
  std::string s = std::string(yytext);

  int i = 0;
  int j = 0;
  for (i; i < s.length(); i++) {
    if (s.at(i) == '$') {
      break;
    }
  }

  for (j = i; j < s.length(); j++) {
    if (s.at(j) == '}') {
      break;
    }
  }

  int start = i + 2;
  int size = j - i - 2;

  if (s.substr(start, size) == "$") {
    // get pid
    s = s.substr(0, i) + std::to_string(getpid()) + s.substr(j + 1);

  } else if (s.substr(start, size) == "?") {
    // get the last return code
    s = s.substr(0, i) + std::to_string(Shell::_currentCommand._last_return_code) + s.substr(j + 1);

  } else if (s.substr(start, size) == "!") {
    // get the last PID of child process
    s = s.substr(0, i) + std::to_string(Shell::_currentCommand._last_PID) + s.substr(j + 1);

  } else if (s.substr(start, size) == "_") {
    // get the last argument in the fully expanded previous command
    s = s.substr(0, i) + Shell::_currentCommand.getLastArg() + s.substr(j + 1);

  } else if (s.substr(start, size) == "SHELL") {
    // get the path of the shell executable
    char path[1024];
    realpath("../shell", path);
    s = s.substr(0, i) + std::string(path) + s.substr(j + 1);

  } else {
    
    // get the value of environment variable
    if (getenv((s.substr(start, size)).c_str())) {
      s = s.substr(0, i) + std::string(getenv((s.substr(start, size)).c_str())) + s.substr(j + 1);
    } else {
      fprintf(stderr, "getenv: error\n");
      yyparse();
    }

  }

  // push back into lex's input buffer
  for (int x = s.length() - 1; x >= 0; x--) {
      myunputc(s.at(x));
  }

}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 198 "shell.l"
{
  std::string subCommands = std::string(yytext);

  // get rid of "$(" and ")" characters
  subCommands = subCommands.substr(2, subCommands.length() - 3);
  
  // initialize input pipe of the subshell
  int pipeIn[2];
  pipe(pipeIn);

  // initialize output pipe of the subshell
  int pipeOut[2];
  pipe(pipeOut);

  // store the standard-in and standard-out for this shell
  int tempin = dup(0);
  int tempout = dup(1);

  // redirect the input of shell to the pipeIn buffer output
  dup2(pipeIn[0], 0);

  // redirect the output of shell to the pipeOut buffer input.
  dup2(pipeOut[1], 1);

  // close the pointing of pipes
  close(pipeIn[0]);
  close(pipeOut[1]);

  // write the commands into the pipeIn buffer input, including the "exit" command
  write(pipeIn[1], subCommands.c_str(), subCommands.length());
  write(pipeIn[1], "\n", 1);
  write(pipeIn[1], "exit\n", 5);
  close(pipeIn[1]);

  // start child process to run subshell
  int ret = fork();

  if (ret == 0) {
    // child process, start subshell
    // create argument array that runs the shell itself in child process
    char ** args = new char *[2];
    args[0] = (char *) "/proc/self/exe";
    args[1] = NULL;
    execvp(args[0], args);

    // error handler
    perror("execvp");
    exit(1);

  } else if (ret < 0) {
    // print error if fork() failed
    perror("subshell: fork");
    exit(1);
  }

  // restore the standard-in and standard-out
  dup2(tempin, 0);
  dup2(tempout, 1);
  close(tempin);
  close(tempout);

  // create a buffer to store the output buffer from subshell, which is the output of pipeOut buffer
  char * pipeOut_buffer = new char[4096];
  int i = 0;
  char c;

  // read every character from the output buffer into the newly created buffer
  while (read(pipeOut[0], &c, 1)) {
    if (c == '\n') {
      // convert each newline character to space
      pipeOut_buffer[i] = ' ';
    } else {
      pipeOut_buffer[i] = c;
    }
    i++;
  }

  // add an EOF character to the end of the buffer
  pipeOut_buffer[i] = '\0';
  close(pipeOut[0]);

  // append the content of this buffer to the lex input buffer in the reversed order
  // remove the goodbye message of the "exit" command
  i = strlen(pipeOut_buffer) - strlen(goodbye_message);
  for (i; i >= 0; i--) {
    myunputc(pipeOut_buffer[i]);
  }

  // free the used buffer
  free(pipeOut_buffer);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 291 "shell.l"
{
  yylval.cpp_string = new std::string(yytext);
  if (yylval.cpp_string->length() == 1) {
    yylval.cpp_string = new std::string(getenv("HOME"));
  } else {
    *yylval.cpp_string = "/homes/" + yylval.cpp_string->substr(1, yylval.cpp_string->length() - 1);
  }
  return WORD;
}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 302 "shell.l"
{
  /* Assume that file names have only alpha chars */
  yylval.cpp_string = new std::string(yytext);
  *yylval.cpp_string = yylval.cpp_string->substr(1, yylval.cpp_string->length() - 2);
  int size = yylval.cpp_string->length();
  for (int i = 0; i < size; i++) {
    if (yylval.cpp_string->at(i) == '\\') {
      yylval.cpp_string->replace(i, 1, "");
      size--;
    }
  }
  return WORD;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 316 "shell.l"
{
  /* Assume that file names have only alpha chars */
  yylval.cpp_string = new std::string(yytext);
  int size = yylval.cpp_string->length();
  for (int i = 0; i < size; i++) {
    if (yylval.cpp_string->at(i) == '\\') {
      yylval.cpp_string->replace(i, 1, "");
      size--;
    }
  }
  return WORD;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 329 "shell.l"
{
  /* Assume that file names have only alpha chars */
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 334 "shell.l"
ECHO;
	YY_BREAK
#line 2048 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 373 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 373 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 372);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 334 "shell.l"
